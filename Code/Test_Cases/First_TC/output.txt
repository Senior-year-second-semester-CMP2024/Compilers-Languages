Lex(1) Command: print
Lex(1) Punctuators: (
Lex(1) String Value: "arithmetic"
	PUSH "arithmetic"
Lex(1) Punctuators: )
Value: "arithmetic"
Lex(1) End Of Statement: ; 

Lex(3) Data Type: int
Lex(3) Identifier: a
Lex(3) Punctuators: =
Lex(3) Integer Value: 5
	PUSH 5
Lex(3) End Of Statement: ; 

	POP a
Lex(4) Data Type: int
Lex(4) Identifier: b
Lex(4) Punctuators: =
Lex(4) Integer Value: 5
	PUSH 5
Lex(4) End Of Statement: ; 

	POP b
Lex(5) Data Type: int
Lex(5) Identifier: c
Lex(5) Punctuators: =
Lex(5) Integer Value: 2
	PUSH 2
Lex(5) End Of Statement: ; 

	POP c
Lex(7) Command: print
Lex(7) Punctuators: (
Lex(7) Identifier: a
Lex(7) Punctuators: )
Value: 5
Lex(7) End Of Statement: ; 

Lex(8) Command: print
Lex(8) Punctuators: (
Lex(8) Identifier: b
Lex(8) Punctuators: )
Value: 5
Lex(8) End Of Statement: ; 

Lex(9) Command: print
Lex(9) Punctuators: (
Lex(9) Identifier: c
Lex(9) Punctuators: )
Value: 2
Lex(9) End Of Statement: ; 

Lex(11) Data Type: int
Lex(11) Identifier: z
Lex(11) Punctuators: =
Lex(11) Arithmetic Operator: -
Lex(11) Identifier: a
	PUSH a
	Negative or Negation
Lex(11) End Of Statement: ; 

	POP z
Lex(12) Command: print
Lex(12) Punctuators: (
Lex(12) Identifier: z
Lex(12) Comparison Operator: ==
	PUSH z
Lex(12) Integer Value: -5
	PUSH -5
Lex(12) Punctuators: )
	Equal
Value: 1
Lex(12) End Of Statement: ; 

Lex(14) Identifier: z
Lex(14) Punctuators: =
Lex(14) Integer Value: -3
	PUSH -3
Lex(14) Arithmetic Operator: -
Lex(14) Integer Value: 4
	PUSH 4
Lex(14) End Of Statement: ; 

	Subtraction
	POP z
Lex(15) Command: print
Lex(15) Punctuators: (
Lex(15) Identifier: z
Lex(15) Punctuators: )
Value: -7
Lex(15) End Of Statement: ; 

Lex(17) Identifier: z
Lex(17) Punctuators: =
Lex(17) Identifier: a
Lex(17) Arithmetic Operator: +
	PUSH a
Lex(17) Identifier: b
Lex(17) End Of Statement: ; 

	PUSH b
	Addition
	POP z
Lex(18) Command: print
Lex(18) Punctuators: (
Lex(18) Identifier: z
Lex(18) Comparison Operator: ==
	PUSH z
Lex(18) Integer Value: 10
	PUSH 10
Lex(18) Punctuators: )
	Equal
Value: 1
Lex(18) End Of Statement: ; 

Lex(20) Identifier: z
Lex(20) Punctuators: =
Lex(20) Identifier: a
Lex(20) Arithmetic Operator: -
	PUSH a
Lex(20) Identifier: b
Lex(20) End Of Statement: ; 

	PUSH b
	Subtraction
	POP z
Lex(21) Command: print
Lex(21) Punctuators: (
Lex(21) Identifier: z
Lex(21) Comparison Operator: ==
	PUSH z
Lex(21) Integer Value: 0
	PUSH 0
Lex(21) Punctuators: )
	Equal
Value: 1
Lex(21) End Of Statement: ; 

Lex(23) Identifier: z
Lex(23) Punctuators: =
Lex(23) Identifier: a
Lex(23) Arithmetic Operator: /
	PUSH a
Lex(23) Identifier: b
Lex(23) End Of Statement: ; 

	PUSH b
	Division
	POP z
Lex(24) Command: print
Lex(24) Punctuators: (
Lex(24) Identifier: z
Lex(24) Comparison Operator: ==
	PUSH z
Lex(24) Integer Value: 1
	PUSH 1
Lex(24) Punctuators: )
	Equal
Value: 1
Lex(24) End Of Statement: ; 

Lex(26) Identifier: z
Lex(26) Punctuators: =
Lex(26) Identifier: a
Lex(26) Arithmetic Operator: %
	PUSH a
Lex(26) Identifier: c
Lex(26) End Of Statement: ; 

	PUSH c
	Modulus
	POP z
Lex(27) Command: print
Lex(27) Punctuators: (
Lex(27) Identifier: a
Lex(27) Arithmetic Operator: %
	PUSH a
Lex(27) Identifier: c
Lex(27) Comparison Operator: ==
	PUSH c
	Modulus
Lex(27) Integer Value: 0
	PUSH 0
Lex(27) Punctuators: )
	Equal
Value: 0
Lex(27) End Of Statement: ; 

Lex(29) Identifier: z
Lex(29) Punctuators: =
Lex(29) Identifier: a
Lex(29) Arithmetic Operator: *
	PUSH a
Lex(29) Identifier: b
Lex(29) Arithmetic Operator: -
	PUSH b
	Multiplication
Lex(29) Identifier: a
Lex(29) Arithmetic Operator: /
	PUSH a
Lex(29) Identifier: b
Lex(29) End Of Statement: ; 

	PUSH b
	Division
	Subtraction
	POP z
Lex(30) Command: print
Lex(30) Punctuators: (
Lex(30) Identifier: z
Lex(30) Comparison Operator: ==
	PUSH z
Lex(30) Integer Value: 24
	PUSH 24
Lex(30) Punctuators: )
	Equal
Value: 1
Lex(30) End Of Statement: ; 

Lex(32) Identifier: z
Lex(32) Punctuators: =
Lex(32) Integer Value: 10
	PUSH 10
Lex(32) Arithmetic Operator: -
Lex(32) Integer Value: 8
	PUSH 8
Lex(32) End Of Statement: ; 

	Subtraction
	POP z
Lex(33) Command: print
Lex(33) Punctuators: (
Lex(33) Identifier: z
Lex(33) Punctuators: )
Value: 2
Lex(33) End Of Statement: ; 

Lex(35) Command: print
Lex(35) Punctuators: (
Lex(35) Integer Value: -100
	PUSH -100
Lex(35) Arithmetic Operator: -
Lex(35) Integer Value: 5
	PUSH 5
Lex(35) Arithmetic Operator: +
	Subtraction
Lex(35) Integer Value: 5
	PUSH 5
Lex(35) Punctuators: )
	Addition
Value: -100
Lex(35) End Of Statement: ; 

