Lex(1) Control Flow: if
Lex(1) Punctuators: (
Lex(1) value: false
	PUSH 0
Lex(1) Punctuators: )
Semantic warning (1): If statement is always False
	JF Label_1
Lex(1) Punctuators: {
Lex(1) Data Type: int
Lex(1) Identifier: a
Lex(1) End Of Statement: ; 

	POP a
Lex(1) Punctuators: }
	JMP EndLabel_1
Label_1:
Lex(3) Control Flow: if
EndLabel_1:
Lex(3) Punctuators: (
Lex(3) Integer Value: 5
	PUSH 5
Lex(3) Comparison Operator: <
Lex(3) Integer Value: 3
	PUSH 3
Lex(3) Punctuators: )
	LT
Semantic warning (3): If statement is always False
	JF Label_2
Lex(3) Punctuators: {
Lex(3) Data Type: int
Lex(3) Identifier: a
Lex(3) End Of Statement: ; 

	POP a
Lex(3) Punctuators: }
	JMP EndLabel_2
Label_2:
Lex(5) Data Modifier: const
EndLabel_2:
Lex(5) Data Type: int
Lex(5) Identifier: x
Lex(5) Punctuators: =
Lex(5) Integer Value: 10
	PUSH 10
Lex(5) End Of Statement: ; 

	POP x
Lex(6) Control Flow: if
Lex(6) Punctuators: (
Lex(6) Identifier: x
Lex(6) Comparison Operator: <
	PUSH x
Lex(6) Integer Value: 3
	PUSH 3
Lex(6) Punctuators: )
	LT
Semantic warning (6): If statement is always False
	JF Label_3
Lex(6) Punctuators: {
Lex(6) Data Type: int
Lex(6) Identifier: a
Lex(6) End Of Statement: ; 

	POP a
Lex(6) Punctuators: }
	JMP EndLabel_3
Label_3:
Lex(8) Data Modifier: const
EndLabel_3:
Lex(8) Data Type: int
Lex(8) Identifier: g
Lex(8) Punctuators: =
Lex(8) Integer Value: 10
	PUSH 10
Lex(8) End Of Statement: ; 

	POP g
Lex(10) Control Flow: if
Lex(10) Punctuators: (
Lex(10) Identifier: g
Lex(10) Comparison Operator: >
	PUSH g
Lex(10) Integer Value: 10
	PUSH 10
Lex(10) Punctuators: )
	GT
Semantic warning (10): If statement is always False
	JF Label_4
Lex(10) Punctuators: {
Lex(10) Data Type: int
Lex(10) Identifier: a
Lex(10) End Of Statement: ; 

	POP a
Lex(10) Punctuators: }
	JMP EndLabel_4
Label_4:
Lex(12) Control Flow: if
EndLabel_4:
Lex(12) Punctuators: (
Lex(12) String Value: "hi"
	PUSH "hi"
Lex(12) Punctuators: )
Semantic warning (12): If statement is always True
	JF Label_5
Lex(12) Punctuators: {
Lex(12) Data Type: int
Lex(12) Identifier: a
Lex(12) End Of Statement: ; 

	POP a
Lex(12) Punctuators: }
	JMP EndLabel_5
Label_5:
Lex(14) Control Flow: else
Lex(14) Control Flow: if
Lex(14) Punctuators: (
Lex(14) Integer Value: 1
	PUSH 1
Lex(14) Comparison Operator: >
Lex(14) Integer Value: 4
	PUSH 4
Lex(14) Punctuators: )
	GT
Semantic warning (14): If statement is always False
	JF Label_6
Lex(14) Punctuators: {
Lex(14) Data Type: int
Lex(14) Identifier: a
Lex(14) End Of Statement: ; 

	POP a
Lex(14) Punctuators: }
	JMP EndLabel_5
Label_6:
Lex(16) Control Flow: if
EndLabel_5:
Lex(16) Punctuators: (
Lex(16) value: false
	PUSH 0
Lex(16) Punctuators: )
Semantic warning (16): If statement is always False
	JF Label_7
Lex(16) Punctuators: {
Lex(16) Data Type: int
Lex(16) Identifier: a
Lex(16) End Of Statement: ; 

	POP a
Lex(16) Punctuators: }
	JMP EndLabel_6
Label_7:
Lex(18) Control Flow: else
Lex(18) Control Flow: if
Lex(18) Punctuators: (
Lex(18) Float Value: 1.1
	PUSH 1.100000
Lex(18) Punctuators: )
Semantic warning (18): If statement is always True
	JF Label_8
Lex(18) Punctuators: {
Lex(18) Data Type: int
Lex(18) Identifier: a
Lex(18) End Of Statement: ; 

	POP a
Lex(18) Punctuators: }
	JMP EndLabel_6
Label_8:
Lex(20) Control Flow: else
Lex(20) Control Flow: if
Lex(20) Punctuators: (
Lex(20) Integer Value: 100
	PUSH 100
Lex(20) Punctuators: )
Semantic warning (20): If statement is always True
	JF Label_9
Lex(20) Punctuators: {
Lex(20) Data Type: int
Lex(20) Identifier: a
Lex(20) End Of Statement: ; 

	POP a
Lex(20) Punctuators: }
	JMP EndLabel_6
Label_9:
Lex(22) Control Flow: if
EndLabel_6:
Lex(22) Punctuators: (
Lex(22) Integer Value: 1
	PUSH 1
Lex(22) Logical Operator: &&
Lex(22) Integer Value: 2
	PUSH 2
Lex(22) Punctuators: )
	Logical AND
Semantic error (22): Type mismatch error
Semantic warning (22): If statement is always False
	JF Label_10
Lex(22) Punctuators: {
Lex(22) Data Type: int
Lex(22) Identifier: a
Lex(22) End Of Statement: ; 

	POP a
Lex(22) Punctuators: }
	JMP EndLabel_7
Label_10:
Lex(24) Control Flow: else
Lex(24) Control Flow: if
Lex(24) Punctuators: (
Lex(24) Integer Value: 1
	PUSH 1
Lex(24) Logical Operator: ||
Lex(24) Integer Value: 0
	PUSH 0
Lex(24) Punctuators: )
	Logical OR
Semantic error (24): Type mismatch error
Semantic warning (24): If statement is always True
	JF Label_11
Lex(24) Punctuators: {
Lex(24) Data Type: int
Lex(24) Identifier: a
Lex(24) End Of Statement: ; 

	POP a
Lex(24) Punctuators: }
	JMP EndLabel_7
Label_11:
Lex(26) Data Type: int
EndLabel_7:
Lex(26) Identifier: a
Lex(26) Punctuators: =
Lex(26) Integer Value: 10
	PUSH 10
Lex(26) End Of Statement: ; 

	POP a
Lex(27) Control Flow: if
Lex(27) Punctuators: (
Lex(27) Identifier: a
Lex(27) Punctuators: )
	PUSH a
Semantic error (27): Uninitialized variable 'a'
	JF Label_12
Lex(27) Punctuators: {
Lex(27) Data Type: int
Lex(27) Identifier: a
Lex(27) End Of Statement: ; 

	POP a
Lex(27) Punctuators: }
	JMP EndLabel_8
Label_12:
EndLabel_8:
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
Semantic error (28): Unused variable 'a'
